Useful Function involving arrays for Coding Interviews

Basic Aggregate Functions
sum(nums): Returns the sum of all elements in a list.

python

nums = [1, 2, 3]
print(sum(nums))  # Output: 6
min(nums) / max(nums): Returns the smallest/largest element in a list.

python

nums = [3, 1, 4]
print(min(nums))  # Output: 1
print(max(nums))  # Output: 4
len(nums): Returns the length of the list.

python

nums = [1, 2, 3]
print(len(nums))  # Output: 3
Sorting and Rearranging
sorted(nums): Returns a sorted version of the list (does not modify the original list).

python

nums = [3, 1, 4]
print(sorted(nums))  # Output: [1, 3, 4]
nums.sort(): Sorts the list in-place.

python

nums = [3, 1, 4]
nums.sort()
print(nums)  # Output: [1, 3, 4]
reversed(nums): Returns an iterator that iterates over the list in reverse.

python

nums = [1, 2, 3]
print(list(reversed(nums)))  # Output: [3, 2, 1]
Filtering and Mapping
filter(function, nums): Filters elements based on a condition.

python

nums = [1, 2, 3, 4]
print(list(filter(lambda x: x % 2 == 0, nums)))  # Output: [2, 4]
map(function, nums): Applies a function to each element of the list.

python

nums = [1, 2, 3]
print(list(map(lambda x: x * 2, nums)))  # Output: [2, 4, 6]
Any/All Checks
any(nums): Returns True if any element of the list is truthy.

python

nums = [0, 0, 1]
print(any(nums))  # Output: True
all(nums): Returns True if all elements of the list are truthy.

python

nums = [1, 2, 3]
print(all(nums))  # Output: True
Index and Search
nums.index(value): Returns the index of the first occurrence of a value.

python

nums = [1, 2, 3]
print(nums.index(2))  # Output: 1
in: Checks if a value is present in the list.

python

nums = [1, 2, 3]
print(2 in nums)  # Output: True
Advanced Functions
enumerate(nums): Iterates with both index and value.

python

nums = [1, 2, 3]
for i, val in enumerate(nums):
    print(i, val)  # Output: (0, 1), (1, 2), (2, 3)
zip(list1, list2): Combines two lists element-wise.

python

list1 = [1, 2, 3]
list2 = ['a', 'b', 'c']
print(list(zip(list1, list2)))  # Output: [(1, 'a'), (2, 'b'), (3, 'c')]
Collections Utility
collections.Counter(nums): Counts the frequency of each element.

python

from collections import Counter
nums = [1, 2, 2, 3]
print(Counter(nums))  # Output: Counter({2: 2, 1: 1, 3: 1})
itertools.combinations(nums, k) / itertools.permutations(nums, k): Generates combinations or permutations of a specific size.

python

from itertools import combinations, permutations
nums = [1, 2, 3]
print(list(combinations(nums, 2)))  # Output: [(1, 2), (1, 3), (2, 3)]
print(list(permutations(nums, 2)))  # Output: [(1, 2), (1, 3), (2, 1), ...]
Miscellaneous
set(nums): Removes duplicates and creates a set.

python

nums = [1, 2, 2, 3]
print(set(nums))  # Output: {1, 2, 3}
bisect.bisect_left(nums, x) / bisect.bisect_right(nums, x): Efficiently finds the position to insert x in a sorted list.

python

import bisect
nums = [1, 2, 4, 5]
print(bisect.bisect_left(nums, 3))  # Output: 2
heapq: Provides a heap-based priority queue.

python

import heapq
nums = [3, 1, 4]
heapq.heapify(nums)
print(nums)  # Output: [1, 3, 4]

